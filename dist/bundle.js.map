{"version":3,"file":"bundle.js","sources":["../src/constants.js","../src/helpers/getFixtureInfo.js","../lib/browser/isManualEventHandling.js","../src/error.js","../lib/file/constants.js","../src/validators/validateFixture.js","../src/validators/validateFile.js","../lib/file/common.js","../lib/file/getFileBlobAsync.js","../lib/file/getFileEncoding.js","../src/index.js","../src/attachFile.js","../lib/object/merge.js","../src/validators/validateOptions.js","../src/helpers/getForceValue.js","../lib/dom/isElementVisible.js","../lib/dom/isShadowElement.js","../lib/file/resolveFile.js","../lib/file/getFileMimeType.js","../lib/file/getFileContent.js","../src/helpers/attachFileToElement.js"],"sourcesContent":["export const DEFAULT_PROCESSING_OPTIONS = Object.freeze({\n  subjectType: 'input',\n  force: false,\n  allowEmpty: false,\n});\n\nexport const SUBJECT_TYPE = Object.freeze({\n  INPUT: 'input',\n  DRAG_N_DROP: 'drag-n-drop',\n});\n\nexport const EVENTS_BY_SUBJECT_TYPE = {\n  [SUBJECT_TYPE.INPUT]: ['change'],\n  [SUBJECT_TYPE.DRAG_N_DROP]: ['dragstart', 'drag', 'dragenter', 'drop', 'change', 'dragleave', 'dragend'],\n};\n","import path from 'path';\n\nexport default function getFixtureInfo(fixtureInput) {\n  if (typeof fixtureInput === 'string') {\n    return {\n      filePath: fixtureInput,\n      encoding: '',\n      mimeType: '',\n      fileName: path.basename(fixtureInput),\n    };\n  }\n\n  return {\n    filePath: fixtureInput.filePath,\n    encoding: fixtureInput.encoding || '',\n    mimeType: fixtureInput.mimeType || '',\n    fileName: fixtureInput.fileName || path.basename(fixtureInput.filePath),\n    fileContent: fixtureInput.fileContent,\n  };\n}\n","const BROWSER_CHROME = 'chrome';\n\nexport default function isManualEventHandling() {\n  const { name, majorVersion } = Cypress.browser;\n\n  if (name === BROWSER_CHROME && majorVersion < 73) {\n    /**\n     * Chrome <73 triggers 'change' event automatically\n     * https://github.com/abramenal/cypress-file-upload/issues/34\n     */\n    return false;\n  }\n\n  return true;\n}\n","export const ERR_TYPES = {\n  INVALID_SUBJECT_TYPE: {\n    message: '\"subjectType\" is not valid',\n    tip: 'Please look into docs to find supported \"subjectType\" values',\n  },\n  INVALID_FORCE: {\n    message: '\"force\" is not valid',\n    tip: 'Please look into docs to find supported \"force\" values',\n  },\n  INVALID_ALLOW_EMPTY: {\n    message: '\"allowEmpty\" is not valid',\n    tip: 'Please look into docs to find supported \"allowEmpty\" values',\n  },\n  INVALID_FILE_ENCODING: {\n    message: '\"file encoding\" is not valid',\n    tip: 'Please look into docs to find supported \"encoding\" values',\n  },\n  INVALID_FILE_PATH: {\n    message: '\"filePath\" is not valid',\n    tip: 'Please look into docs to find supported \"filePath\" values',\n  },\n  INVALID_MIME_TYPE: {\n    message: '\"mimeType\" is not valid',\n    tip: 'Please look into docs to find supported \"mimeType\" values',\n  },\n  INVALID_FILE: {\n    message: 'given fixture file is empty',\n    tip: 'Please make sure you provide correct file or explicitly set \"allowEmpty\" to true',\n  },\n  MISSING_FILE_NAME_OR_PATH: {\n    message: 'missing \"filePath\" or \"fileName\"',\n    tip: 'Please make sure you are passing either \"filePath\" or \"fileName\"',\n  },\n};\n\nexport class InternalError extends Error {\n  constructor(errorType, ...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InternalError);\n    }\n\n    this.name = '[cypress-file-upload error]';\n    this.message = `${errorType.message}.\\n${errorType.tip}`;\n  }\n}\n","export const ENCODING = Object.freeze({\n  ASCII: 'ascii',\n  BASE64: 'base64',\n  BINARY: 'binary',\n  HEX: 'hex',\n  LATIN1: 'latin1',\n  UTF8: 'utf8',\n  UTF_8: 'utf-8',\n  UCS2: 'ucs2',\n  UCS_2: 'ucs-2',\n  UTF16LE: 'utf16le',\n  UTF_16LE: 'utf-16le',\n});\n\nexport const FILE_EXTENSION = Object.freeze({\n  JSON: 'json',\n  JS: 'js',\n  COFFEE: 'coffee',\n  HTML: 'html',\n  TXT: 'txt',\n  CSV: 'csv',\n  PNG: 'png',\n  JPG: 'jpg',\n  JPEG: 'jpeg',\n  GIF: 'gif',\n  TIF: 'tif',\n  TIFF: 'tiff',\n  ZIP: 'zip',\n  PDF: 'pdf',\n  VCF: 'vcf',\n  SVG: 'svg',\n  XLS: 'xls',\n  XLSX: 'xlsx',\n  DOC: 'doc',\n  DOCX: 'docx',\n  MP3: 'mp3',\n});\n","import { ERR_TYPES, InternalError } from '../error';\nimport { ENCODING } from '../../lib/file/constants';\n\nconst ALLOWED_ENCODINGS = Object.values(ENCODING);\n\nexport default function validateFixtures(fixture) {\n  const { filePath, fileName, encoding, mimeType, fileContent } = fixture;\n\n  if (encoding && !ALLOWED_ENCODINGS.includes(encoding)) {\n    throw new InternalError(ERR_TYPES.INVALID_FILE_ENCODING);\n  }\n\n  if (typeof filePath !== 'string' && !fileContent) {\n    throw new InternalError(ERR_TYPES.INVALID_FILE_PATH);\n  }\n\n  if (typeof mimeType !== 'string') {\n    throw new InternalError(ERR_TYPES.INVALID_MIME_TYPE);\n  }\n\n  if (!filePath && !fileName) {\n    throw new InternalError(ERR_TYPES.MISSING_FILE_NAME_OR_PATH);\n  }\n\n  return true;\n}\n","import { ERR_TYPES, InternalError } from '../error';\n\nexport default (file, allowEmpty) => {\n  if (!allowEmpty) {\n    const { size } = file;\n\n    if (size === 0) {\n      throw new InternalError(ERR_TYPES.INVALID_FILE);\n    }\n  }\n\n  return true;\n};\n","export const wrapBlob = blob => {\n  // Cypress version 5 assigns a function with a compatibility warning\n  // to blob.then, but that makes the Blob actually thenable. We have\n  // to remove that to Promise.resolve not treat it as thenable.\n  if (blob instanceof Cypress.Promise) {\n    return blob;\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  delete blob.then;\n  return Cypress.Promise.resolve(blob);\n};\n\nexport default { wrapBlob };\n","import { extname } from 'path';\n\nimport { ENCODING, FILE_EXTENSION } from './constants';\n\nimport { wrapBlob } from './common';\n\nconst ENCODING_TO_BLOB_GETTER = {\n  [ENCODING.ASCII]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.BASE64]: (fileContent, mimeType) => wrapBlob(Cypress.Blob.base64StringToBlob(fileContent, mimeType)),\n  [ENCODING.BINARY]: (fileContent, mimeType) => wrapBlob(Cypress.Blob.binaryStringToBlob(fileContent, mimeType)),\n  [ENCODING.HEX]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.LATIN1]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF8]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF_8]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UCS2]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UCS_2]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF16LE]: fileContent => Cypress.Promise.resolve(fileContent),\n  [ENCODING.UTF_16LE]: fileContent => Cypress.Promise.resolve(fileContent),\n};\n\nexport default function getFileBlobAsync({ fileName, fileContent, mimeType, encoding, window }) {\n  const getBlob = ENCODING_TO_BLOB_GETTER[encoding];\n\n  return getBlob(fileContent, mimeType).then(blob => {\n    let blobContent = blob;\n\n    // https://github.com/abramenal/cypress-file-upload/issues/175\n    if (extname(fileName).slice(1) === FILE_EXTENSION.JSON) {\n      blobContent = JSON.stringify(fileContent, null, 2);\n    }\n\n    // we must use the file constructor from the subject window so this check `file instanceof File`, can pass\n    const file = new window.File([blobContent], fileName, { type: mimeType });\n    return file;\n  });\n}\n","import { extname } from 'path';\n\nimport { ENCODING, FILE_EXTENSION } from './constants';\n\n/*\n * Copied from https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/fixture.coffee#L104\n */\nconst EXTENSION_TO_ENCODING = {\n  [FILE_EXTENSION.JSON]: ENCODING.UTF8,\n  [FILE_EXTENSION.JS]: ENCODING.UTF8,\n  [FILE_EXTENSION.COFFEE]: ENCODING.UTF8,\n  [FILE_EXTENSION.HTML]: ENCODING.UTF8,\n  [FILE_EXTENSION.TXT]: ENCODING.UTF8,\n  [FILE_EXTENSION.CSV]: ENCODING.UTF8,\n  [FILE_EXTENSION.PNG]: ENCODING.BASE64,\n  [FILE_EXTENSION.JPG]: ENCODING.BASE64,\n  [FILE_EXTENSION.JPEG]: ENCODING.BASE64,\n  [FILE_EXTENSION.GIF]: ENCODING.BASE64,\n  [FILE_EXTENSION.TIF]: ENCODING.BASE64,\n  [FILE_EXTENSION.TIFF]: ENCODING.BASE64,\n  [FILE_EXTENSION.ZIP]: ENCODING.BASE64,\n\n  /*\n   * Other extensions that are not supported by cy.fixture by default:\n   */\n  [FILE_EXTENSION.PDF]: ENCODING.UTF8,\n  [FILE_EXTENSION.VCF]: ENCODING.UTF8,\n  [FILE_EXTENSION.SVG]: ENCODING.UTF8,\n  [FILE_EXTENSION.XLS]: ENCODING.BINARY,\n  [FILE_EXTENSION.XLSX]: ENCODING.BINARY,\n  [FILE_EXTENSION.DOC]: ENCODING.BINARY,\n  [FILE_EXTENSION.DOCX]: ENCODING.BINARY,\n  [FILE_EXTENSION.MP3]: ENCODING.BINARY,\n};\n\nconst DEFAULT_ENCODING = ENCODING.UTF8;\n\nexport default function getFileEncoding(filePath) {\n  const extension = extname(filePath).slice(1);\n  const encoding = EXTENSION_TO_ENCODING[extension];\n\n  return encoding || DEFAULT_ENCODING;\n}\n","import attachFile from './attachFile';\n\nconst initialize = () => {\n  Cypress.Commands.add('attachFile', { prevSubject: true }, attachFile);\n};\n\ninitialize();\n","import { DEFAULT_PROCESSING_OPTIONS } from './constants';\n\nimport { attachFileToElement, getFixtureInfo, getForceValue } from './helpers';\nimport { validateFixture, validateFile, validateOptions } from './validators';\nimport { resolveFile } from '../lib/file';\nimport { merge } from '../lib/object';\n\nexport default function attachFile(subject, fixtureOrFixtureArray, processingOptions) {\n  const { subjectType, force, allowEmpty } = merge(processingOptions, DEFAULT_PROCESSING_OPTIONS);\n  validateOptions({\n    subjectType,\n    force,\n    allowEmpty,\n  });\n\n  const fixturesArray = Array.isArray(fixtureOrFixtureArray) ? fixtureOrFixtureArray : [fixtureOrFixtureArray];\n  const fixtures = fixturesArray.map(getFixtureInfo).filter(validateFixture);\n\n  Cypress.cy.window({ log: false }).then(window => {\n    const forceValue = force || getForceValue(subject);\n\n    Cypress.Promise.all(fixtures.map(f => resolveFile(f, window))) // resolve files\n      .then(files => files.map(f => validateFile(f, allowEmpty) && f)) // error if any of the file contents are invalid\n      .then(files => {\n        attachFileToElement(subject, {\n          files,\n          subjectType,\n          force: forceValue,\n          window,\n        });\n        return files;\n      })\n      .then(files =>\n        Cypress.log({\n          name: 'attachFile',\n          displayName: 'FILE',\n          message: files.reduce((acc, f) => `${acc.length > 0 ? `${acc}, ` : acc}${f.name}`, ''),\n        }),\n      );\n  });\n\n  return Cypress.cy.wrap(subject, { log: false });\n}\n","export default function merge(target = {}, source = {}) {\n  return {\n    ...source,\n    ...target,\n  };\n}\n","import { SUBJECT_TYPE } from '../constants';\nimport { ERR_TYPES, InternalError } from '../error';\n\nexport default ({ subjectType, force, allowEmpty }) => {\n  if (Object.values(SUBJECT_TYPE).indexOf(subjectType) === -1) {\n    throw new InternalError(ERR_TYPES.INVALID_SUBJECT_TYPE);\n  }\n\n  if (typeof force !== 'boolean') {\n    throw new InternalError(ERR_TYPES.INVALID_FORCE);\n  }\n\n  if (typeof allowEmpty !== 'boolean') {\n    throw new InternalError(ERR_TYPES.INVALID_ALLOW_EMPTY);\n  }\n\n  return true;\n};\n","import { isManualEventHandling } from '../../lib/browser';\nimport { isElementVisible, isShadowElement } from '../../lib/dom';\n\nexport default function getForceValue(subject) {\n  return isManualEventHandling() || !isElementVisible(subject) || isShadowElement(subject);\n}\n","/**\n * @description determines if element is visible in DOM\n *\n * @param {Cypress.Subject} element\n * @returns {Boolean}\n */\nexport default function isElementVisible(element) {\n  if (!element) {\n    throw new Error('Element cannot be empty');\n  }\n\n  /* running isVisible command on detached element throws an error */\n  return Cypress.dom.isAttached(element) && Cypress.dom.isVisible(element);\n}\n","/**\n * @description determines if element is visible in DOM\n *\n * @param {Cypress.Subject} element\n * @returns {Boolean}\n */\nexport default function isShadowElement(element) {\n  if (!element) {\n    throw new Error('Element cannot be empty');\n  }\n\n  return Cypress.dom.isDetached(element);\n}\n","import getFileContent from './getFileContent';\nimport getFileMimeType from './getFileMimeType';\nimport getFileEncoding from './getFileEncoding';\nimport getFileBlobAsync from './getFileBlobAsync';\n\nexport default function resolveFile(fixture, window) {\n  const { filePath, encoding, mimeType, fileName } = fixture;\n\n  const fileMimeType = mimeType || getFileMimeType(filePath);\n  const fileEncoding = encoding || getFileEncoding(filePath);\n\n  return new Cypress.Promise(resolve =>\n    getFileContent({\n      filePath,\n      fileContent: fixture.fileContent,\n      fileEncoding,\n    })\n      .then(fileContent =>\n        getFileBlobAsync({\n          fileContent,\n          fileName,\n          mimeType: fileMimeType,\n          encoding: fileEncoding,\n          window,\n        }),\n      )\n      .then(resolve),\n  );\n}\n","import { extname } from 'path';\nimport { getType } from 'mime';\n\nexport default function getFileMimeType(filePath) {\n  const extension = extname(filePath).slice(1);\n  const mimeType = getType(extension);\n\n  return mimeType;\n}\n","import { wrapBlob } from './common';\n\nexport default function getFileContent({ filePath, fileContent, fileEncoding }) {\n  // allows users to provide file content.\n  if (fileContent) {\n    return wrapBlob(fileContent);\n  }\n\n  return Cypress.cy.fixture(filePath, fileEncoding);\n}\n","import { SUBJECT_TYPE, EVENTS_BY_SUBJECT_TYPE } from '../constants';\n\nexport default function(subject, { files, subjectType, force, window }) {\n  const dataTransfer = new window.DataTransfer();\n  files.forEach(f => dataTransfer.items.add(f));\n\n  if (subjectType === SUBJECT_TYPE.INPUT) {\n    const inputElement = subject[0];\n\n    if (inputElement.files && inputElement.files.length > 0) {\n      /* Keep files that were attached before */\n      Array.prototype.forEach.call(inputElement.files, f => dataTransfer.items.add(f));\n    }\n\n    inputElement.files = dataTransfer.files;\n  }\n\n  if (force) {\n    const events = EVENTS_BY_SUBJECT_TYPE[subjectType];\n    const eventPayload = {\n      bubbles: true,\n      cancelable: true,\n      detail: dataTransfer,\n    };\n\n    try {\n      events.forEach(e => {\n        const event = new CustomEvent(e, eventPayload);\n        Object.assign(event, { dataTransfer });\n\n        subject[0].dispatchEvent(event);\n      });\n    } catch (e) {\n      // make sure event triggering won't break if subject element is not visible or in DOM anymore\n    }\n  }\n}\n"],"names":["DEFAULT_PROCESSING_OPTIONS","Object","freeze","subjectType","force","allowEmpty","SUBJECT_TYPE","INPUT","DRAG_N_DROP","EVENTS_BY_SUBJECT_TYPE","getFixtureInfo","fixtureInput","filePath","encoding","mimeType","fileName","path","basename","fileContent","const","ERR_TYPES","INVALID_SUBJECT_TYPE","message","tip","INVALID_FORCE","INVALID_ALLOW_EMPTY","INVALID_FILE_ENCODING","INVALID_FILE_PATH","INVALID_MIME_TYPE","INVALID_FILE","MISSING_FILE_NAME_OR_PATH","InternalError","constructor","errorType","params","Error","captureStackTrace","this","name","ENCODING","ASCII","BASE64","BINARY","HEX","LATIN1","UTF8","UTF_8","UCS2","UCS_2","UTF16LE","UTF_16LE","FILE_EXTENSION","JSON","JS","COFFEE","HTML","TXT","CSV","PNG","JPG","JPEG","GIF","TIF","TIFF","ZIP","PDF","VCF","SVG","XLS","XLSX","DOC","DOCX","MP3","ALLOWED_ENCODINGS","values","validateFixtures","fixture","includes","wrapBlob","blob","Cypress","Promise","then","resolve","ENCODING_TO_BLOB_GETTER","Blob","base64StringToBlob","binaryStringToBlob","EXTENSION_TO_ENCODING","DEFAULT_ENCODING","Commands","add","prevSubject","subject","fixtureOrFixtureArray","processingOptions","target","source","indexOf","validateOptions","fixtures","Array","isArray","map","filter","validateFixture","cy","window","log","forceValue","browser","element","dom","isAttached","isVisible","isElementVisible","isDetached","isShadowElement","getForceValue","all","f","fileMimeType","extension","extname","slice","getType","getFileMimeType","fileEncoding","getFileEncoding","getFileContent","getBlob","blobContent","stringify","File","type","getFileBlobAsync","resolveFile","files","file","validateFile","dataTransfer","DataTransfer","forEach","items","inputElement","length","prototype","call","events","eventPayload","bubbles","cancelable","detail","e","event","CustomEvent","assign","dispatchEvent","attachFileToElement","displayName","reduce","acc","wrap"],"mappings":"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"}